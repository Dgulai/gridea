<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dgulai.github.io/gridea/</id>
    <title>Gridea</title>
    <updated>2020-08-15T12:39:56.099Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dgulai.github.io/gridea/"/>
    <link rel="self" href="https://dgulai.github.io/gridea/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://dgulai.github.io/gridea/images/avatar.png</logo>
    <icon>https://dgulai.github.io/gridea/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[从零学Java-10 面向对象编程02]]></title>
        <id>https://dgulai.github.io/gridea/post/cong-ling-xue-java-10-mian-xiang-dui-xiang-bian-cheng-02/</id>
        <link href="https://dgulai.github.io/gridea/post/cong-ling-xue-java-10-mian-xiang-dui-xiang-bian-cheng-02/">
        </link>
        <updated>2020-08-15T12:03:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="封装">封装</h3>
<ul>
<li>该露的露，该藏的藏<br>
程序设计追求 <strong>高内聚，低耦合</strong>。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少量的方法给外部使用</li>
<li>封装（数据的隐藏）<br>
通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏</li>
<li>记住这句话： <strong>属性私有(private)，get/set</strong></li>
<li>优点
<ol>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码的实现细节</li>
<li>统一接口</li>
<li>系统的可维护性增加</li>
</ol>
</li>
</ul>
<h3 id="继承">继承</h3>
<ul>
<li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模</li>
<li>extends （扩展）。子类是父类的扩展</li>
<li>JAVA中类只有单继承，没有多继承</li>
<li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有 依赖 组合 聚合 等</li>
<li>继承关系的两个类，一个位子类（派生类）， 一个为父类（基类）。 子类继承父类，使用关键字 extends来表示</li>
<li>子类和父类之间，从意义上讲应该具有 &quot;is a&quot; 的关系</li>
<li>object类<br>
在 java中 所有的类都默认或者间接继承Object类</li>
<li>super</li>
<li>方法重写</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从零学Java-09 面向对象编程01]]></title>
        <id>https://dgulai.github.io/gridea/post/cong-ling-xue-java-09-mian-xiang-dui-xiang-bian-cheng-01/</id>
        <link href="https://dgulai.github.io/gridea/post/cong-ling-xue-java-09-mian-xiang-dui-xiang-bian-cheng-01/">
        </link>
        <updated>2020-08-15T10:47:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="面向过程思想">面向过程思想</h3>
<ul>
<li>步骤清晰简单，第一步，第二步...</li>
<li>面对过程是和处理一些较为简单的问题</li>
</ul>
<h3 id="面向对象思想">面向对象思想</h3>
<ul>
<li>物以类聚，分类 的思维模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索</li>
<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题</li>
<li>对于描述复杂的事务，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理</li>
</ul>
<h3 id="什么是面向对象">什么是面向对象</h3>
<ul>
<li>面向对象编程( Object-Oriented Programming, OOP )</li>
<li>面向对象编程的本质就是： <strong>以类的方式组织代码，以对象的组织（封装）数据</strong></li>
<li>三大特性:
<ol>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ol>
</li>
<li>从认识论角度考虑是现有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象</li>
<li>从代码运行角度考虑是先有类后有对象。类是对象的模板</li>
</ul>
<h3 id="类与对象的关系">类与对象的关系</h3>
<ul>
<li>类是一中抽象的数据类型，它是对某一类食物整体描述/定义，但是并不代表某一个具体的事物</li>
<li>对象是抽象概念的具体实例</li>
</ul>
<h3 id="创建与初始化对象">创建与初始化对象</h3>
<ul>
<li>使用 new 关键字创建对象</li>
<li>使用 new 关键字创建的时候，除了分配内存空间外，还会给 创建好的对象 进行默认的初始化 以及对类中构造器的调用</li>
<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且构造器有以下两个特点
<ol>
<li>必须和类的名字相同</li>
<li>必须没有返回类型，也不能写 void</li>
</ol>
</li>
<li>定义了有参数的构造器，无参数的构造器就必须显示定义,如果什么都不写则会有一个默认的构造器</li>
<li>构造器必须要掌握<br>
<strong>构造器注意</strong></li>
</ul>
<ol>
<li>和类名相同</li>
<li>没有返回值</li>
<li>new 本质在调用构造方法</li>
<li>初始化对象的值</li>
<li>定义了有参数的构造器，无参数的构造器就必须显示定义</li>
<li>生成构造器快捷键  alt+insert</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从零学Java-08 数组02数组的使用]]></title>
        <id>https://dgulai.github.io/gridea/post/cong-ling-xue-java-08-shu-zu-02-shu-zu-ji-chu/</id>
        <link href="https://dgulai.github.io/gridea/post/cong-ling-xue-java-08-shu-zu-02-shu-zu-ji-chu/">
        </link>
        <updated>2020-08-15T10:46:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="数组的使用">数组的使用</h3>
<ul>
<li>for 循环(/增强)</li>
<li>For-Each 循环</li>
<li>数组作方法入参</li>
<li>数组作返回值</li>
</ul>
<h3 id="多维数组">多维数组</h3>
<ul>
<li>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组</li>
<li>二维数组<pre><code class="language-java">int a[][] = new int[2][5];
</code></pre>
解析: 以上二维数组 a 可以看成一个两行五列的数组</li>
</ul>
<h3 id="arrays-类">Arrays 类</h3>
<ul>
<li>数组的工具类 java.util.Arrays</li>
<li>由于数组对象本身并没有什么方法可供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本操作</li>
<li>查看 jdk 帮助文档</li>
<li>Arrays类中的方法都是 static 修饰的静态方法，在使用的时候可以直接使用类名进行调用，而“不用”使用对象来调用（注意：是“不用” 而不是 “不能”）</li>
<li>Arrays类常用功能
<ol>
<li>给数组赋值： 通过 fill 方法</li>
<li>对数组排序： 通过 sort 方法，按升序</li>
<li>比较数组： 通过 equals 方法比较数组中元素值是否相等</li>
<li>查找数组元素： 通过 binarySearch 方法能对排序好的数组进行二分查找法操作</li>
<li>...</li>
</ol>
</li>
</ul>
<h3 id="冒泡排序">冒泡排序</h3>
<ul>
<li>冒泡排序无疑是最为出名的排序算法之一，总共有八大排序</li>
<li>冒泡排序代码相对简单，两层循环，外层冒泡轮数，里层依次比较</li>
<li>看到嵌套循环，应该立马就可以得出这个算法的 时间复杂度为 0(n2)<pre><code class="language-java">/*
 * 冒泡排序
 * 1. 比较数组中，两个相邻的元素，如果第一个数比第二个数大，就交换他们的位置
 * 2. 每次比较，都会产生一个最大，或者最小的数字
 * 3. 下一轮则可以少一次排序
 * 4. 依次循环，直到结束
 * */
public static int[] sort(int[] array) {
    // 临时变量
    int temp = 0;
    // 外层循环， 判断我们这个要走多少次
    for (int i = 0; i &lt; array.length - 1; i++) {
        boolean flag = false; // (优化)通过 flag 标识位减少没有意义的比较
        // 内层循环， 比价判断两个数，如果第一个数比第二个数大，交换位置
        for (int j = 0; j &lt; array.length - 1 - i; j++) {
            if (array[j + 1] &lt; array[j]) {
                temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
                flag = true;
            }
        }
        if(flag==false) break;  // 没有设置为true 说明没进行比较 全部通过(已排序好) 直接退出
        System.out.println(Arrays.toString(array));
    }
    return array;
}
</code></pre>
</li>
</ul>
<h3 id="稀疏数组">稀疏数组</h3>
<ul>
<li>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存</li>
<li>稀疏数组的处理方式是：
<ol>
<li>记录数组一共有几行几列，有多少个不同值</li>
<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>
</ol>
</li>
</ul>
<pre><code class="language-java">public static void main(String[] args) {
        // 1. 创建一个二维数组 11*11  0：没有棋子，1：黑棋 2：白棋
        int [][] array1 = new int[11][11];
        array1[1][2] = 1;
        array1[2][3] = 2;
        System.out.println(&quot;输出原始的数组&quot;);
        for (int[] ints : array1) {
            for (int anInt : ints) {
                System.out.print(anInt+&quot;\t&quot;);
            }
            System.out.println();
        }
        System.out.println(&quot;++++++++++++++++++++++++++++++++++++++++++&quot;);
        // 转换为稀疏数组保存
        // 获取有效值的个数
        int sum = 0;
        for (int i = 0; i &lt; 11; i++) {
            for (int j = 0; j &lt; 11; j++) {
                if(array1[i][j]!=0){
                    sum++;
                }
            }
        }
        System.out.println(&quot;有效值的个数:&quot;+sum);
        // 创建一个稀疏数组的数组
        int[][] array2 = new int[sum+1][3];
        array2[0][0] = 11;
        array2[0][1] = 11;
        array2[0][2] = sum;
        // 遍历二维数组， 将非零的值放入稀疏数组
        int count = 0;
        for (int i = 0; i &lt; array1.length; i++) {
            for (int j = 0; j &lt; array1[i].length; j++) {
                if(array1[i][j]!=0){
                    count++;
                    array2[count][0] = i;
                    array2[count][1] = j;
                    array2[count][2] = array1[i][j];
                }
            }
        }
        // 输出稀疏数组
        System.out.println(&quot;输出稀疏数组&quot;);
        for (int i = 0; i &lt; array2.length; i++) {
            System.out.println(array2[i][0]+&quot;\t&quot;+array2[i][1]+&quot;\t&quot;+array2[i][2]+&quot;\t&quot;);
        }
        System.out.println(&quot;++++++++++++++++++++++++++++++++++++++++++&quot;);
        System.out.println(&quot;稀疏数组还原&quot;);
        // 1. 读取稀疏数组
        int[][] array3 = new int[array2[0][0]][array2[0][1]];
        // 给其中的元素还原它的值
        for (int i = 1; i &lt; array2.length; i++) {
            array3[array2[i][0]][array2[i][1]] = array2[i][2];
        }
        // 3. 打印
        System.out.println(&quot;输出还原的数组&quot;);
        for (int[] ints : array3) {
            for (int anInt : ints) {
                System.out.print(anInt+&quot;\t&quot;);
            }
            System.out.println();
        }
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从零学Java-07 数组01数组基础]]></title>
        <id>https://dgulai.github.io/gridea/post/cong-ling-xue-java-07-shu-zu-01-shu-zu-ji-chu/</id>
        <link href="https://dgulai.github.io/gridea/post/cong-ling-xue-java-07-shu-zu-01-shu-zu-ji-chu/">
        </link>
        <updated>2020-08-15T10:45:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="数组的定义">数组的定义</h3>
<ul>
<li>数组是相同类型数据的有序集合</li>
<li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成</li>
<li>其中，每一个数据称作数组元素，每个数组元素可以通过一个下标来访问它们</li>
</ul>
<h3 id="数组声明创建">数组声明创建</h3>
<ul>
<li>首先必须声明数组变量，才能在程序中使用数组。如下:<pre><code class="language-java">dataType[] arrayRefVar;     // 首选方法
dataType arrayRefVar[];     // 效果相同，不是首选
</code></pre>
</li>
<li>Java语言使用new操作符来创建数组<pre><code class="language-java">// 动态初始化: 包含默认初始化（所有项分配默认值 0）
dataType[] arrayRefVar = new dataType[arraySize]; //arraySize 给数组分配空间
// 静态初始化
int[] a = {1,2,3,4,5,6};    // 初始化后数组长度已定
</code></pre>
</li>
<li>数组的元素是通过索引访问的，数组索引从0开始</li>
<li>获取数组长度: <code>arrays.length</code></li>
</ul>
<h3 id="数组的四个基本特点">数组的四个基本特点</h3>
<ul>
<li>其长度是确定的。数组 一旦被创建，它的大小就是不可以改变的。</li>
<li>其元素必须是相同类型，不允许出现混合类型</li>
<li>数组的元素可以是任何数据类型，包括基本类型和引用类型</li>
<li>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</li>
<li>数组本身就是对象，java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中的</li>
</ul>
<h3 id="数组边界">数组边界</h3>
<ul>
<li>下标的合法区域: [ 0, length-1 ],如果越界就会报错</li>
<li><strong>ArrayIndexOutOfBoundsException:  数组下标越界异常!</strong></li>
</ul>
<h3 id="小结">小结</h3>
<ul>
<li>数组是相同数据类型( 数据类型可以为任意类型 )的有序集合</li>
<li>数组也是对象。数组元素相当于对象的成员变量</li>
<li>数组长度是确定的，不可变的。如果越界，则报: <strong>ArrayIndexOutOfBoundsException</strong></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从零学Java-06 java的方法、参数]]></title>
        <id>https://dgulai.github.io/gridea/post/cong-ling-xue-java-06-java-de-fang-fa-can-shu/</id>
        <link href="https://dgulai.github.io/gridea/post/cong-ling-xue-java-06-java-de-fang-fa-can-shu/">
        </link>
        <updated>2020-08-15T10:18:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="何谓方法">何谓方法？</h3>
<ul>
<li>
<p>Java方法时语句的集合，它们在一起执行一个功能</p>
<ul>
<li>方法时解决一类问题的不走的有序组合</li>
<li>方法包含于类或对象中</li>
<li>方法在程序中被创建，在其他地方被引用</li>
</ul>
</li>
<li>
<p>设计方法的原则<br>
方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，就是<strong>一个方法只完成 1 个功能</strong>，这样利于我们后期的扩展</p>
</li>
</ul>
<h3 id="方法的定义">方法的定义</h3>
<ul>
<li>Java的方法类似于其他语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义方法包含以下语法:
<ul>
<li>修饰符： 修饰符，可选，告诉编辑器如何调用该方法，定义了该方法的访问类型</li>
<li>返回值类型： 方法可能会返回值 returnValueType是方法返回值的数据类型，有些方法执行所需的操作，但没有返回值， 则returnValueType 是关键字 void</li>
<li>方法名： 是方法的实际名称。 方法名和参数表共同构成方法签名</li>
<li>参数类型： 参数像是一个占位符。当方法被调用的时候，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型 顺序 和参数的个数。 参数是可选的 方法可以不包含任何参数</li>
<li>方法体： 方法体包含具体的语句，定义该方法的功能</li>
</ul>
</li>
</ul>
<pre><code class="language-java">修饰符 返回值类型 方法名(参数类型 参数名){
    ...方法体
    return 返回值
}
</code></pre>
<h3 id="方法的重载">方法的重载</h3>
<ul>
<li>重载就是在一个类中，有相同的函数名称，但形参不同的函数</li>
<li>方法重载的规则
<ul>
<li>方法名必须相同</li>
<li>参数列表必须不同（个数不同 类型不同，参数排列顺序不同）</li>
<li>方法的返回类型可以相同也可以不同</li>
<li>仅仅返回类型不同不足以成为方法的重载</li>
</ul>
</li>
<li>实现理论<br>
方法名相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败则报错</li>
</ul>
<h3 id="命令行传参">命令行传参</h3>
<p>通过命令行编译可以传递参数</p>
<h3 id="可变参数不定项">可变参数（不定项）</h3>
<ul>
<li>JDK1.5开始 Java支持传递同类型的可变参数给一个方法</li>
<li>在方法声明中，在指定参数类型后加一个省略号(...)</li>
<li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数，所有普通参数必须在它之前声明</li>
</ul>
<h3 id="递归">递归</h3>
<ul>
<li>A方法调用A方法自己</li>
<li>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</li>
<li>递归结构包括两个部分
<ul>
<li>递归头： 递归出口，没有出口将陷入死循环</li>
<li>递归体： 调用自身</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从零学Java-05 java流程控制]]></title>
        <id>https://dgulai.github.io/gridea/post/cong-ling-xue-java-05-java-liu-cheng-kong-zhi/</id>
        <link href="https://dgulai.github.io/gridea/post/cong-ling-xue-java-05-java-liu-cheng-kong-zhi/">
        </link>
        <updated>2020-08-15T09:34:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="用户交互-scanner">用户交互 Scanner</h3>
<ul>
<li>java.util.Scanner 是java5的性特征，可以通过Scanner类来获取用户输入</li>
<li>基本用法</li>
</ul>
<pre><code class="language-java">Scanner s = new Scanner(System.in);
</code></pre>
<ul>
<li>通过Scanner的 next() (遇到空格结束) 和 nextLine() (enter为结束)方法获取输入的字符串，读取前一般先使用 hasNext() 或 hasNextLine()判断是否还有输入的数据</li>
</ul>
<h3 id="顺序结构">顺序结构</h3>
<ul>
<li>Java的基本结构就是顺序结构，除非特别指明，否则就按照顺序执行</li>
<li>顺序结构是最简单的算法结构</li>
<li>语句与语句之间，框与框之间是按从上到下的顺序进行的，它是由若尬歌依次执行的处理步骤组成，<strong>它是任何一个算法都离不开的一种基本算法结构</strong></li>
</ul>
<h3 id="选择结构">选择结构</h3>
<ul>
<li>if 单选择结构</li>
<li>if 双选择结构 (else if)</li>
<li>if 多选择结构 (else if ...)</li>
<li>嵌套的 if 结构</li>
<li>switch 多选择结构<br>
switch 语句中的变量类型可以使: byte short int char<br>
<strong>从 Java SE7 开始 switch 支持字符串 string 类型</strong></li>
</ul>
<h3 id="循环结构">循环结构</h3>
<ul>
<li>while 循环<br>
while为最基本的循环 <code>while(布尔表达式){}</code> 只要布尔表达式成立则一直循环(先判断再自行)</li>
<li>do...while 循环 <code>do{}while(布尔表达式)</code> 先执行一次再判断</li>
<li>for 循环
<ul>
<li>for 循环，使一些循环结构变得更简单</li>
<li>for 循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环结构</li>
<li>for 循环执行的次数是在执行前就确定的 <code>for(初始化;布尔表达式;迭代){}</code><br>
<strong>在Java5中引入了一种主要用于数组的增强for循环</strong></li>
</ul>
</li>
<li>增强for循环</li>
</ul>
<pre><code class="language-java">int[] numbers = { 1,2,3,4,5};
for (int number : numbers) {
    ...
}
</code></pre>
<h3 id="break-continue">break continue</h3>
<ul>
<li>break在任何循环体的主体部分，均可用break控制循环的流程，主要用于 <strong>退出循环</strong>，不再执行剩余的循环及语句(switch中类似)</li>
<li>continue 语句用在循环语句体重，用于终止某一次循环过程，执行下一次循环</li>
<li>关于goto关键字
<ol>
<li>goto关键字很早在程序涉及语言中出现， 尽管goto仍然是java的一个保留字，但并未在语言中的到正式使用；java没有goto。然而，在break和continue这两个关键字身上，仍然能看出一些goto的影子 -- 带标签的break和continue</li>
<li>标签 是指后面跟一个冒号的标识符 例如: lable:</li>
<li>对java来说唯一用到标签的地方是在循环语句之前。而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，它们就会中断到存在标签的地方</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从零学Java-04 运算符 包机制]]></title>
        <id>https://dgulai.github.io/gridea/post/cong-ling-xue-java-04-yun-suan-fu-bao-ji-zhi/</id>
        <link href="https://dgulai.github.io/gridea/post/cong-ling-xue-java-04-yun-suan-fu-bao-ji-zhi/">
        </link>
        <updated>2020-08-15T09:27:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="java支持的运算符">Java支持的运算符</h3>
<ul>
<li>算术运算符 : + - * / % ++ --</li>
<li>赋值运算符： =</li>
<li>关系运算符： &gt; &lt; &gt;= &lt;= == !=instanceof</li>
<li>逻辑运算符：&amp;&amp; || !</li>
<li>位运算符： &amp; | ^ ~ &gt;&gt; &lt;&lt; &gt;&gt;&gt;</li>
<li>条件运算符： ？ :</li>
<li>扩展赋值运算符： += -= *= /=</li>
</ul>
<h3 id="包机制">包机制</h3>
<ul>
<li>为了更好的组织类， java提供了包机制， 用于区别类名的命名空间</li>
<li>包语句的语法格式为 <code>package pack1[. pack2[. pack3...]]</code></li>
<li>** 一般利用公司域名倒置作为包名**</li>
<li>为了使用某一个包的成员，需要在java程序中明确导入该包，使用 import 语句<br>
<code>import package1[.package2...].(classname|*)</code></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从零学Java-03 变量 常量 作用域]]></title>
        <id>https://dgulai.github.io/gridea/post/cong-ling-xue-java-02-bian-liang-chang-liang-zuo-yong-yu/</id>
        <link href="https://dgulai.github.io/gridea/post/cong-ling-xue-java-02-bian-liang-chang-liang-zuo-yong-yu/">
        </link>
        <updated>2020-08-15T09:15:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="变量">变量</h3>
<ul>
<li>变量就是可变化的量</li>
<li>Java是一种强类型语言，每个变量都必须声明其类型</li>
<li>Java变量时程序中最基本的存储单元，其要输包括变量名，变量类型和作用域</li>
</ul>
<pre><code class="language-java">type varName [=value] [{,varName[=value]}]
// 数据类型 变量名 = 值； 可用逗号隔开声明多个同类型变量
</code></pre>
<ul>
<li>注意事项
<ol>
<li>每个变量都有类型，类型可以是基本类型，引用类型</li>
<li>变量名必须是合法的标识符</li>
<li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</li>
</ol>
</li>
</ul>
<h3 id="变量作用域">变量作用域</h3>
<ul>
<li>类变量</li>
<li>实例变量</li>
<li>局部变量</li>
</ul>
<pre><code class="language-java">public class Variable{
    static int allClicks = 0; // 类变量( static )
    String str = &quot;hello&quot;;   // 实例变量 没有初始化会有默认值  false/0/null ..
    public void method(){
        int i = 0; // 局部变量（必须声明和初始化）
    }
}
</code></pre>
<h3 id="常量">常量</h3>
<ul>
<li>初始化后不能再改变 (final 定义)</li>
<li>常量名一般使用大写</li>
</ul>
<h3 id="变量的命名规范">变量的命名规范</h3>
<ul>
<li>所有变量 方法 类名： 见名知意</li>
<li>类成员变量： 首字母小写和驼峰原则</li>
<li>局部变量： 首字母小写和驼峰原则</li>
<li>常量： 大写字母和下划线分割字母</li>
<li>类名： 首字母大写和驼峰原则</li>
<li>方法名： 首字母小写和驼峰原则</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从零学Java-02 数据类型]]></title>
        <id>https://dgulai.github.io/gridea/post/cong-ling-xue-java-02-shu-ju-lei-xing/</id>
        <link href="https://dgulai.github.io/gridea/post/cong-ling-xue-java-02-shu-ju-lei-xing/">
        </link>
        <updated>2020-08-15T08:49:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="强类型语言">强类型语言</h3>
<p>要求变量的使用要严格符合规定，所有变量都必须限定以后才能使用</p>
<h3 id="弱类型语言">弱类型语言</h3>
<h3 id="java的数据类型分为两大类">Java的数据类型分为两大类</h3>
<ul>
<li>
<p>基本类型(primitive type)</p>
<ol>
<li>byte 占1字节范围: -128 - 127</li>
<li>short 占2个字节范围: -32768 - 32767</li>
<li>int 占4个字节范围: ...</li>
<li>long 占8个字节范围: ...</li>
<li>float 占4个字节</li>
<li>double 占8个字节</li>
<li>char 占2个字节</li>
<li>boolean 占1个位 只有 true和false</li>
</ol>
</li>
<li>
<p>引用类型(reference type)</p>
<ol>
<li>类</li>
<li>接口</li>
<li>数组</li>
</ol>
</li>
</ul>
<h3 id="数据类型扩展">数据类型扩展</h3>
<ul>
<li>整数拓展<br>
进制 二进制(0b) 八进制(0) 十六进制(0x)</li>
<li>浮点数拓展<br>
银行业务表示:</li>
</ul>
<pre><code class="language-java">float f = 0.1f; //0.1
double d = 1.0/10; //0.1
System.out.println(f==d); // false
float d1 = 32320432492f;
float d2 = d1+1;
System.out.println(d1==d2); // true
</code></pre>
<p>float 有限 离散 舍入误差  大约 接近但不等于<br>
<strong>最好完全使用避免使用浮点数进行比较（数学工具类BigDecimal）</strong></p>
<ul>
<li>字符拓展<br>
字符的本质还是数字 表示成 Unicode</li>
</ul>
<h3 id="类型转换">类型转换</h3>
<ul>
<li>由于Java是强类型的语言，所以要进行有些运算的时候，需要用到类型转换<br>
由低到高： byte, short, char -&gt; int -&gt; long -&gt; float -&gt; double</li>
<li>运算中，不同类型的数据优先转化为同一类型，再进行运算</li>
<li>强制类型转换(高-&gt;低)</li>
</ul>
<pre><code class="language-java">int i = 100;
byte b = (byte)i;
</code></pre>
<ul>
<li>自动类型转换(低-&gt;高)</li>
</ul>
<pre><code class="language-java">int i = 100;
double b = i;
</code></pre>
<h5 id="注意点">注意点</h5>
<ul>
<li>不能对布尔值进行转换</li>
<li>不能把对象类型转换为不相干的类型</li>
<li>在把高容量转换到低容量的时候，强制转换</li>
<li>转换的时候可能存在内存溢出，或精度问题</li>
</ul>
<pre><code class="language-java">// 操作比较大的数的时候注意溢出问题（解决：先把一个数转换为long）
// jdk7新特性，数字之间可以用下划线分割
int money = 10_0000_0000;
int years = 20;
long total = money*((long)years);
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从零学Java-01 注释，标识符，关键字]]></title>
        <id>https://dgulai.github.io/gridea/post/cong-ling-xue-java-01-zhu-shi-biao-shi-fu-guan-jian-zi/</id>
        <link href="https://dgulai.github.io/gridea/post/cong-ling-xue-java-01-zhu-shi-biao-shi-fu-guan-jian-zi/">
        </link>
        <updated>2020-08-15T08:31:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="java中的注释">java中的注释</h3>
<ul>
<li>单行注释  <code>// 注释</code></li>
<li>多行注释   <code>/*注释*/</code></li>
<li>文档注释<pre><code class="language-java">/**
 * @Description hello
 * @Author Gulai
 * */
</code></pre>
</li>
</ul>
<h3 id="标识符">标识符</h3>
<ul>
<li>关键字</li>
</ul>
<table>
<thead>
<tr>
<th>关键字</th>
<th>关键字</th>
<th>关键字</th>
<th>关键字</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>abstract</td>
<td>assert</td>
<td>boolean</td>
<td>break</td>
<td>byte</td>
</tr>
<tr>
<td>case</td>
<td>catch</td>
<td>char</td>
<td>class</td>
<td>const</td>
</tr>
<tr>
<td>continue</td>
<td>default</td>
<td>do</td>
<td>double</td>
<td>else</td>
</tr>
<tr>
<td>enum</td>
<td>extends</td>
<td>final</td>
<td>finally</td>
<td>float</td>
</tr>
<tr>
<td>for</td>
<td>goto</td>
<td>if</td>
<td>implements</td>
<td>import</td>
</tr>
<tr>
<td>instanceof</td>
<td>int</td>
<td>interface</td>
<td>long</td>
<td>native</td>
</tr>
<tr>
<td>new</td>
<td>package</td>
<td>private</td>
<td>protected</td>
<td>public</td>
</tr>
<tr>
<td>return</td>
<td>strictfp</td>
<td>short</td>
<td>static</td>
<td>super</td>
</tr>
<tr>
<td>switch</td>
<td>synchronized</td>
<td>this</td>
<td>throw</td>
<td>throws</td>
</tr>
<tr>
<td>transient</td>
<td>try</td>
<td>void</td>
<td>volatile</td>
<td>while</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>Java 所有的组成部分都需要名字。类名，变量名以及方法名都被称为标识符</strong></li>
</ul>
<h3 id="标识符注意点">标识符注意点</h3>
<ul>
<li>所有标识符都应该以 A-Z或者a-z，美元符$  或者下划线 _ 开始</li>
<li>首字符之后可以事字母，美元符，下划线 或数字的任何字符组合</li>
<li>标识符大小写敏感</li>
<li><em>可以使用中文名，但是不建议使用</em></li>
</ul>
]]></content>
    </entry>
</feed>